// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // A Register
    Mux16(a=instruction,b=outToM,sel=instruction[15],out=instructionMux);
    // A Register load should = Not(instruction[15]) OR (instruction[15] AND instruction[5])
    Not(in=instruction[15],out=notI15);
    And(a=instruction[15],b=instruction[5],out=andI5andI15);
    Or(a=notI15,b=andI5andI15,out=loadARegister);
    ARegister(in=instructionMux,out[0..14]=addressM,out=aRegister,load=loadARegister); // A Register

    // PC
    And(a=instruction[1],b=zrOut,out=jeq); // if JEQ and op is == 0 then jeq==1
    And(a=instruction[2],b=ngOut,out=jlt); // if JLT and op is < 0 then jlt==1
    Not(in=zrOut,out=njeq);
    Not(in=ngOut,out=njlt);
    And(a=njeq,b=njlt,out=testjgt); // if JEQ == 0 AND JLT == 0 then op is > 0
    And(a=instruction[0],b=testjgt,out=jgt); // if JGT and op is > 0 then jgt==1

    Or(a=jeq,b=jlt,out=jumpTest1);
    Or(a=jgt,b=jumpTest1,out=jumpTest2); // If any jump condition is met this is 1
    And(a=jumpTest2,b=instruction[15],out=jumpTestFinal); // If jump conditions and op code 1 then we jump
    Not(in=jumpTestFinal,out=pcInc);
    PC(in=aRegister,load=jumpTestFinal,inc=pcInc,reset=reset,out[0..14]=pc);

    // D register
    And(a=instruction[15],b=instruction[4],out=loadDRegister);
    DRegister(in=outToM,out=dRegister,load=loadDRegister);

    // ALU Mux
    Mux16(a=aRegister,b=inM,sel=instruction[12],out=muxAddressOrMemory);

    // ALU
    ALU(x=dRegister,y=muxAddressOrMemory,zx=instruction[11],nx=instruction[10],
        zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],
        zr=zrOut,ng=ngOut,out=outM, out=outToM);
    
    And(a=instruction[15],b=instruction[3], out=writeM);
}